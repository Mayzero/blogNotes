{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u524d\u8a00 \u8bb0\u5f55\u672c\u4eba\u7684\u4e00\u4e9b\u7b14\u8bb0\u4ee5\u4f9b\u67e5\u8be2\u3002 Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u524d\u8a00"},{"location":"#_1","text":"\u8bb0\u5f55\u672c\u4eba\u7684\u4e00\u4e9b\u7b14\u8bb0\u4ee5\u4f9b\u67e5\u8be2\u3002","title":"\u524d\u8a00"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"GAMES101/Assignment01/","text":"\u4f5c\u4e1a1 \u65cb\u8f6c\u4e0e\u6295\u5f71 \u6a21\u578b\u53d8\u6362\u77e9\u9635 \u9010\u4e2a\u5143\u7d20\u5730\u6784\u5efa\u6a21\u578b\u53d8\u6362\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u3002\u5728\u6b64\u51fd\u6570\u4e2d\uff0c\u4f60\u53ea\u9700\u8981\u5b9e\u73b0\u4e09\u7ef4\u4e2d\u7ed5z \u8f74\u65cb\u8f6c\u7684\u53d8\u6362\u77e9\u9635\uff0c\u800c\u4e0d\u7528\u5904\u7406\u5e73\u79fb\u4e0e\u7f29\u653e\u3002 \u5185\u7f6e\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5f27\u5ea6\uff0c\u8981\u5148\u628a\u89d2\u5ea6\u6362\u6210\u5f27\u5ea6 \u5f27\u5ea6=\u89d2\u5ea6*pi/180 Eigen :: Matrix4f get_model_matrix ( float rotation_angle ) { Eigen :: Matrix4f model = Eigen :: Matrix4f :: Identity (); // TODO: Implement this function // Create the model matrix for rotating the triangle around the Z axis. // Then return it. model << cos ( rotation_angle * MY_PI / 180 ), - sin ( rotation_angle * MY_PI / 180 ), 0 , 0 , sin ( rotation_angle * MY_PI / 180 ), cos ( rotation_angle * MY_PI / 180 ), 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 ; return model ; } \u6784\u5efa\u900f\u89c6\u6295\u5f71\u77e9\u9635 \u6839\u636e\u94fe\u63a5\uff1ahttp://www.songho.ca/opengl/gl_projectionmatrix.html \u5df2\u77e5\uff0copenGL\u4e0b\u6295\u5f71\u77e9\u9635\u4e3a \\(\\begin{bmatrix} \\frac {2n}{r-l} & 0 & \\frac {r+l}{r-l} & 0 \\\\ 0 & \\frac {2n}{t-b} & \\frac {t+b}{t-b} & 0\\\\ 0 & 0 & \\frac {n+f}{n-f} & \\frac {2nf}{n-f} \\\\ 0 & 0 & -1 & 0 \\end{bmatrix}\\) \u5df2\u77e5\u5bbd\u9ad8\u6bd4\uff0c\u9690\u542b\u5047\u8bbe\u5bf9\u79f0\u6761\u4ef6\uff0cl = -r, b = -t Eigen :: Matrix4f get_projection_matrix ( float eye_fov , float aspect_ratio , float zNear , float zFar ) { // Students will implement this function Eigen :: Matrix4f projection = Eigen :: Matrix4f :: Identity (); // TODO: Implement this function // Create the projection matrix for the given parameters. // Then return it. float fov_rad = eye_fov * MY_PI / 180 ; float top = tan ( fov_rad * 0.5 ) * zNear ; float right = aspect_ratio * top ; projection << zNear / right , 0 , 0 , 0 , 0 , zNear / top , 0 , 0 , 0 , 0 , ( zNear + zFar ) / ( zNear - zFar ), 2 * zNear * zFar / ( zNear - zFar ), 0 , 0 , -1 , 0 ; return projection ; } \u7ed3\u679c \u65cb\u8f6c\u540e\u7684\u7ed3\u679c","title":"Assignment01 \u4f5c\u4e1a1 \u65cb\u8f6c\u4e0e\u6295\u5f71"},{"location":"GAMES101/Assignment01/#1","text":"","title":"\u4f5c\u4e1a1 \u65cb\u8f6c\u4e0e\u6295\u5f71"},{"location":"GAMES101/Assignment01/#_1","text":"\u9010\u4e2a\u5143\u7d20\u5730\u6784\u5efa\u6a21\u578b\u53d8\u6362\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u3002\u5728\u6b64\u51fd\u6570\u4e2d\uff0c\u4f60\u53ea\u9700\u8981\u5b9e\u73b0\u4e09\u7ef4\u4e2d\u7ed5z \u8f74\u65cb\u8f6c\u7684\u53d8\u6362\u77e9\u9635\uff0c\u800c\u4e0d\u7528\u5904\u7406\u5e73\u79fb\u4e0e\u7f29\u653e\u3002 \u5185\u7f6e\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5f27\u5ea6\uff0c\u8981\u5148\u628a\u89d2\u5ea6\u6362\u6210\u5f27\u5ea6 \u5f27\u5ea6=\u89d2\u5ea6*pi/180 Eigen :: Matrix4f get_model_matrix ( float rotation_angle ) { Eigen :: Matrix4f model = Eigen :: Matrix4f :: Identity (); // TODO: Implement this function // Create the model matrix for rotating the triangle around the Z axis. // Then return it. model << cos ( rotation_angle * MY_PI / 180 ), - sin ( rotation_angle * MY_PI / 180 ), 0 , 0 , sin ( rotation_angle * MY_PI / 180 ), cos ( rotation_angle * MY_PI / 180 ), 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 ; return model ; }","title":"\u6a21\u578b\u53d8\u6362\u77e9\u9635"},{"location":"GAMES101/Assignment01/#_2","text":"\u6839\u636e\u94fe\u63a5\uff1ahttp://www.songho.ca/opengl/gl_projectionmatrix.html \u5df2\u77e5\uff0copenGL\u4e0b\u6295\u5f71\u77e9\u9635\u4e3a \\(\\begin{bmatrix} \\frac {2n}{r-l} & 0 & \\frac {r+l}{r-l} & 0 \\\\ 0 & \\frac {2n}{t-b} & \\frac {t+b}{t-b} & 0\\\\ 0 & 0 & \\frac {n+f}{n-f} & \\frac {2nf}{n-f} \\\\ 0 & 0 & -1 & 0 \\end{bmatrix}\\) \u5df2\u77e5\u5bbd\u9ad8\u6bd4\uff0c\u9690\u542b\u5047\u8bbe\u5bf9\u79f0\u6761\u4ef6\uff0cl = -r, b = -t Eigen :: Matrix4f get_projection_matrix ( float eye_fov , float aspect_ratio , float zNear , float zFar ) { // Students will implement this function Eigen :: Matrix4f projection = Eigen :: Matrix4f :: Identity (); // TODO: Implement this function // Create the projection matrix for the given parameters. // Then return it. float fov_rad = eye_fov * MY_PI / 180 ; float top = tan ( fov_rad * 0.5 ) * zNear ; float right = aspect_ratio * top ; projection << zNear / right , 0 , 0 , 0 , 0 , zNear / top , 0 , 0 , 0 , 0 , ( zNear + zFar ) / ( zNear - zFar ), 2 * zNear * zFar / ( zNear - zFar ), 0 , 0 , -1 , 0 ; return projection ; }","title":"\u6784\u5efa\u900f\u89c6\u6295\u5f71\u77e9\u9635"},{"location":"GAMES101/Assignment01/#_3","text":"\u65cb\u8f6c\u540e\u7684\u7ed3\u679c","title":"\u7ed3\u679c"},{"location":"GAMES101/Lecture01/","text":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8ff0 Course Topics (mainly 4 parts) Rasterization Curves and Meshes Ray Tracing Animation / Simulation 1.Rasterization \u5149\u6805\u5316 Project geometry primitives (3D triangles / polygons) onto the screen \u5c06\u51e0\u4f55\u57fa\u5143\uff08\u4e09\u7ef4\u4e09\u89d2\u5f62/\u591a\u8fb9\u5f62\uff09\u6295\u5f71\u5230\u5c4f\u5e55\u4e0a Break projected primitives into fragments (pixels) \u5c06\u6295\u5c04\u7684\u57fa\u5143\u5206\u89e3\u4e3a\u788e\u7247\uff08\u50cf\u7d20\uff09\u3002 Gold standard in Video Games (Real-time Applications) \u89c6\u9891\u6e38\u620f\uff08\u5b9e\u65f6\u5e94\u7528\uff09\u7684\u9ec4\u91d1\u6807\u51c6 2.Curves and Meshes \u66f2\u7ebf\u548c\u7f51\u683c \u5982\u4f55\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u8868\u793a\u51e0\u4f55\u56fe\u5f62 - Bezier Curve - Catmull-Clark subdivision 3.Ray Tracing Shoot rays from the camera though each pixel Calculate intersection and shading \u8ba1\u7b97\u4ea4\u53c9\u70b9\u548c\u9634\u5f71 Continue to bounce the rays till they hit light sources \u7ee7\u7eed\u53cd\u5f39\u5149\u7ebf\uff0c\u76f4\u5230\u5b83\u4eec\u51fb\u4e2d\u5149\u6e90 Gold standard in Animations / Movies (Offline Applications) 4.Animation / Simulation Key frame Animation \u5173\u952e\u5e27\u52a8\u753b Mass-spring System 5.Most recommended reference Steve Marschner and Peter Shirley, \"Fundamentals of Computer Graphics\", 3rd or later edition. 6.Dot Product in Graphics \\(\\overrightarrow {x} \\cdot \\overrightarrow {y} = ||\\overrightarrow {x}||||\\overrightarrow {y}||cos\\theta\\) \u70b9\u79ef\u7ed3\u679c\u662f\u4e00\u4e2a\u6570, \u51e0\u4f55\u610f\u4e49\uff1a\u6295\u5f71 Find angle between two vectors (e.g. cosine of angle between light source and surface) Finding projection(\u6295\u5f71) of one vector on another Measure how close two directions are Decompose a vector Determine forward / backward 7.Cross Product in Graphics \\(\\overrightarrow {x} \\times \\overrightarrow {y} = -\\overrightarrow {y} \\times \\overrightarrow {x}\\) \\(\\overrightarrow {x} \\times \\overrightarrow {y} = ||\\overrightarrow {x}||||\\overrightarrow {y}||sin\\theta\\) \u53c9\u79ef\u4e0e\u4e24\u4e2a\u521d\u59cb\u5411\u91cf\u6b63\u4ea4 \u7531\u53f3\u624b\u5b9a\u5219\u786e\u5b9a\u7684\u65b9\u5411 \u7528\u4e8e\u6784\u5efa\u5750\u6807\u7cfb \u53c9\u4e58\u7ed3\u679c\u662f\u4e00\u4e2a\u5411\u91cf Determine left / right Determine inside / outside","title":"Lecture01 \u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8ff0"},{"location":"GAMES101/Lecture01/#_1","text":"","title":"\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u6982\u8ff0"},{"location":"GAMES101/Lecture01/#course-topics-mainly-4-parts","text":"Rasterization Curves and Meshes Ray Tracing Animation / Simulation","title":"Course Topics (mainly 4 parts)"},{"location":"GAMES101/Lecture01/#1rasterization","text":"Project geometry primitives (3D triangles / polygons) onto the screen \u5c06\u51e0\u4f55\u57fa\u5143\uff08\u4e09\u7ef4\u4e09\u89d2\u5f62/\u591a\u8fb9\u5f62\uff09\u6295\u5f71\u5230\u5c4f\u5e55\u4e0a Break projected primitives into fragments (pixels) \u5c06\u6295\u5c04\u7684\u57fa\u5143\u5206\u89e3\u4e3a\u788e\u7247\uff08\u50cf\u7d20\uff09\u3002 Gold standard in Video Games (Real-time Applications) \u89c6\u9891\u6e38\u620f\uff08\u5b9e\u65f6\u5e94\u7528\uff09\u7684\u9ec4\u91d1\u6807\u51c6","title":"1.Rasterization \u5149\u6805\u5316"},{"location":"GAMES101/Lecture01/#2curves-and-meshes","text":"\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u8868\u793a\u51e0\u4f55\u56fe\u5f62 - Bezier Curve - Catmull-Clark subdivision","title":"2.Curves and Meshes \u66f2\u7ebf\u548c\u7f51\u683c"},{"location":"GAMES101/Lecture01/#3ray-tracing","text":"Shoot rays from the camera though each pixel Calculate intersection and shading \u8ba1\u7b97\u4ea4\u53c9\u70b9\u548c\u9634\u5f71 Continue to bounce the rays till they hit light sources \u7ee7\u7eed\u53cd\u5f39\u5149\u7ebf\uff0c\u76f4\u5230\u5b83\u4eec\u51fb\u4e2d\u5149\u6e90 Gold standard in Animations / Movies (Offline Applications)","title":"3.Ray Tracing"},{"location":"GAMES101/Lecture01/#4animation-simulation","text":"Key frame Animation \u5173\u952e\u5e27\u52a8\u753b Mass-spring System","title":"4.Animation / Simulation"},{"location":"GAMES101/Lecture01/#5most-recommended-reference","text":"Steve Marschner and Peter Shirley, \"Fundamentals of Computer Graphics\", 3rd or later edition.","title":"5.Most recommended reference"},{"location":"GAMES101/Lecture01/#6dot-product-in-graphics","text":"\\(\\overrightarrow {x} \\cdot \\overrightarrow {y} = ||\\overrightarrow {x}||||\\overrightarrow {y}||cos\\theta\\) \u70b9\u79ef\u7ed3\u679c\u662f\u4e00\u4e2a\u6570, \u51e0\u4f55\u610f\u4e49\uff1a\u6295\u5f71 Find angle between two vectors (e.g. cosine of angle between light source and surface) Finding projection(\u6295\u5f71) of one vector on another Measure how close two directions are Decompose a vector Determine forward / backward","title":"6.Dot Product in Graphics"},{"location":"GAMES101/Lecture01/#7cross-product-in-graphics","text":"\\(\\overrightarrow {x} \\times \\overrightarrow {y} = -\\overrightarrow {y} \\times \\overrightarrow {x}\\) \\(\\overrightarrow {x} \\times \\overrightarrow {y} = ||\\overrightarrow {x}||||\\overrightarrow {y}||sin\\theta\\) \u53c9\u79ef\u4e0e\u4e24\u4e2a\u521d\u59cb\u5411\u91cf\u6b63\u4ea4 \u7531\u53f3\u624b\u5b9a\u5219\u786e\u5b9a\u7684\u65b9\u5411 \u7528\u4e8e\u6784\u5efa\u5750\u6807\u7cfb \u53c9\u4e58\u7ed3\u679c\u662f\u4e00\u4e2a\u5411\u91cf Determine left / right Determine inside / outside","title":"7.Cross Product in Graphics"},{"location":"GAMES101/Lecture03/","text":"\u53d8\u6362\uff08\u4e8c\u7ef4\u4e0e\u4e09\u7ef4\uff09 1. 2D transformations 1.1 Scale (Non-Uniform) \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}S_x & 0 \\\\ 0 & S_y\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\) 1.2 Reflection Matrix Horizontal reflection: \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}-1 & 0 \\\\ 0 & 1\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\) 1.3 Shear Matrix \u5207\u53d8 Hints: Horizontal shift is 0 at y=0 Horizontal shift is a at y=1 Vertical shift is always 0 \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}1 & a \\\\ 0 & 1\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\) 1.4 Rotation Matrix \u4ee5\u539f\u70b9\u4e3a\u65cb\u8f6c\u4e2d\u5fc3\u70b9 \\(R_\\theta\\) = \\(\\begin{bmatrix}cos\\theta & -sin\\theta \\\\ sin\\theta & cos\\theta\\\\ \\end{bmatrix}\\) 1.5 Linear Transforms = Matrices(of the same dimension) \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}a & b \\\\ c & d\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\) 2. Homogeneous coordinates \u9f50\u6b21\u5750\u6807 \u5e73\u79fb\u5c31\u4e0d\u662fLinear Transforms\uff0c\u4e3a\u4e86\u7edf\u4e00\u5f62\u5f0f\u5f15\u5165\u9f50\u6b21\u5750\u6807\u3002 Add a third coordinate (w-coordinate) 2D point = \\((x, y, 1)^T\\) 2D vector = \\((x, y, 0)^T\\) 2.1 Affine Transformations \u4eff\u5c04\u53d8\u6362 Affine map = linear map + translation: \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}a & b \\\\ c & d\\\\ \\end{bmatrix}\\) \\(\\cdot \\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\) + \\(\\begin{bmatrix}t_x\\\\ t_y\\\\ \\end{bmatrix}\\) \u5148\u7ebf\u6027\u53d8\u6362\uff0c\u518d\u5e73\u79fb Using homogenous coordinates: \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}a & b & t_x\\\\ c & d & t_y\\\\ 0 & 0 & 1 \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ 1\\end{bmatrix}\\) \u5e73\u79fb\u53ef\u4ee5\u5199\u6210\uff1a \\(T(t_x,t_y)\\) = \\(\\begin{bmatrix}1 & 0 & t_x\\\\ 0 & 1 & t_y\\\\ 0 & 0 & 1 \\end{bmatrix}\\) 2.2 Composing Transforms Sequence of affine transforms A1, A2, A3, ... \\(An(...A2(A1(x))) = An \u00b7\u00b7\u00b7 A2 \u00b7 A1 \u00b7\\) \\(\\begin{bmatrix}x\\\\ y\\\\ 1 \\end{bmatrix}\\) \u9884\u5148\u5c06n\u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u5f97\u5230\u4e00\u4e2a\u4ee3\u8868\u7ec4\u5408\u53d8\u6362\u7684 \u4ee3\u8868\u7ec4\u5408\u53d8\u6362\u7684\u5355\u4e00\u77e9\u9635 2.3 Decomposing Complex Transforms How to rotate around a given point c? Translate center to origin Rotate Translate back Matrix representation: \\(T(c) \u00b7 R(\\alpha) \u00b7 T(c)\\) 3. 3D Transformations Use homogeneous coordinates again: 3D point = \\((x, y, z, 1)^T\\) 3D vector = $(x, y, z, 0)^T $ Note In general, \\((x, y, z, w) (w != 0)\\) is the 3D point: \\((x/w, y/w, z/w)\\) 3.1 Rotation around x-, y-, or z-axis \\(R_x(\\alpha)\\) = \\(\\begin{bmatrix} 1 & 0 & 0 & 0 \\\\ 0 & cos(\\alpha) & -sin(\\alpha) & 0\\\\ 0 & sin(\\alpha) & cos(\\alpha) & 0 \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) \\(R_x(\\alpha)\\) = \\(\\begin{bmatrix} cos(\\alpha) & 0 & sin(\\alpha) & 0\\\\ 0 & 1 & 0 & 0 \\\\ -sin(\\alpha) & 0 & cos(\\alpha) & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}\\) \\(R_x(\\alpha)\\) = \\(\\begin{bmatrix} cos(\\alpha) & -sin(\\alpha) & 0 & 0\\\\ sin(\\alpha) & cos(\\alpha) & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}\\)","title":"Lecture03 \u53d8\u6362\uff08\u4e8c\u7ef4\u4e0e\u4e09\u7ef4\uff09"},{"location":"GAMES101/Lecture03/#_1","text":"","title":"\u53d8\u6362\uff08\u4e8c\u7ef4\u4e0e\u4e09\u7ef4\uff09"},{"location":"GAMES101/Lecture03/#1-2d-transformations","text":"","title":"1. 2D transformations"},{"location":"GAMES101/Lecture03/#11-scale-non-uniform","text":"\\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}S_x & 0 \\\\ 0 & S_y\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\)","title":"1.1 Scale (Non-Uniform)"},{"location":"GAMES101/Lecture03/#12-reflection-matrix","text":"Horizontal reflection: \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}-1 & 0 \\\\ 0 & 1\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\)","title":"1.2 Reflection Matrix"},{"location":"GAMES101/Lecture03/#13-shear-matrix","text":"Hints: Horizontal shift is 0 at y=0 Horizontal shift is a at y=1 Vertical shift is always 0 \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}1 & a \\\\ 0 & 1\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\)","title":"1.3 Shear Matrix \u5207\u53d8"},{"location":"GAMES101/Lecture03/#14-rotation-matrix","text":"\u4ee5\u539f\u70b9\u4e3a\u65cb\u8f6c\u4e2d\u5fc3\u70b9 \\(R_\\theta\\) = \\(\\begin{bmatrix}cos\\theta & -sin\\theta \\\\ sin\\theta & cos\\theta\\\\ \\end{bmatrix}\\)","title":"1.4 Rotation Matrix"},{"location":"GAMES101/Lecture03/#15-linear-transforms-matricesof-the-same-dimension","text":"\\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}a & b \\\\ c & d\\\\ \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\)","title":"1.5 Linear Transforms = Matrices(of the same dimension)"},{"location":"GAMES101/Lecture03/#2-homogeneous-coordinates","text":"\u5e73\u79fb\u5c31\u4e0d\u662fLinear Transforms\uff0c\u4e3a\u4e86\u7edf\u4e00\u5f62\u5f0f\u5f15\u5165\u9f50\u6b21\u5750\u6807\u3002 Add a third coordinate (w-coordinate) 2D point = \\((x, y, 1)^T\\) 2D vector = \\((x, y, 0)^T\\)","title":"2. Homogeneous coordinates \u9f50\u6b21\u5750\u6807"},{"location":"GAMES101/Lecture03/#21-affine-transformations","text":"Affine map = linear map + translation: \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}a & b \\\\ c & d\\\\ \\end{bmatrix}\\) \\(\\cdot \\begin{bmatrix}x\\\\ y\\\\ \\end{bmatrix}\\) + \\(\\begin{bmatrix}t_x\\\\ t_y\\\\ \\end{bmatrix}\\) \u5148\u7ebf\u6027\u53d8\u6362\uff0c\u518d\u5e73\u79fb Using homogenous coordinates: \\(\\begin{bmatrix}x'\\\\ y'\\\\ \\end{bmatrix}\\) = \\(\\begin{bmatrix}a & b & t_x\\\\ c & d & t_y\\\\ 0 & 0 & 1 \\end{bmatrix}\\) \\(\\begin{bmatrix}x\\\\ y\\\\ 1\\end{bmatrix}\\) \u5e73\u79fb\u53ef\u4ee5\u5199\u6210\uff1a \\(T(t_x,t_y)\\) = \\(\\begin{bmatrix}1 & 0 & t_x\\\\ 0 & 1 & t_y\\\\ 0 & 0 & 1 \\end{bmatrix}\\)","title":"2.1 Affine Transformations \u4eff\u5c04\u53d8\u6362"},{"location":"GAMES101/Lecture03/#22-composing-transforms","text":"Sequence of affine transforms A1, A2, A3, ... \\(An(...A2(A1(x))) = An \u00b7\u00b7\u00b7 A2 \u00b7 A1 \u00b7\\) \\(\\begin{bmatrix}x\\\\ y\\\\ 1 \\end{bmatrix}\\) \u9884\u5148\u5c06n\u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u5f97\u5230\u4e00\u4e2a\u4ee3\u8868\u7ec4\u5408\u53d8\u6362\u7684 \u4ee3\u8868\u7ec4\u5408\u53d8\u6362\u7684\u5355\u4e00\u77e9\u9635","title":"2.2 Composing Transforms"},{"location":"GAMES101/Lecture03/#23-decomposing-complex-transforms","text":"How to rotate around a given point c? Translate center to origin Rotate Translate back Matrix representation: \\(T(c) \u00b7 R(\\alpha) \u00b7 T(c)\\)","title":"2.3 Decomposing Complex Transforms"},{"location":"GAMES101/Lecture03/#3-3d-transformations","text":"Use homogeneous coordinates again: 3D point = \\((x, y, z, 1)^T\\) 3D vector = $(x, y, z, 0)^T $ Note In general, \\((x, y, z, w) (w != 0)\\) is the 3D point: \\((x/w, y/w, z/w)\\)","title":"3. 3D Transformations"},{"location":"GAMES101/Lecture03/#31-rotation-around-x-y-or-z-axis","text":"\\(R_x(\\alpha)\\) = \\(\\begin{bmatrix} 1 & 0 & 0 & 0 \\\\ 0 & cos(\\alpha) & -sin(\\alpha) & 0\\\\ 0 & sin(\\alpha) & cos(\\alpha) & 0 \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) \\(R_x(\\alpha)\\) = \\(\\begin{bmatrix} cos(\\alpha) & 0 & sin(\\alpha) & 0\\\\ 0 & 1 & 0 & 0 \\\\ -sin(\\alpha) & 0 & cos(\\alpha) & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}\\) \\(R_x(\\alpha)\\) = \\(\\begin{bmatrix} cos(\\alpha) & -sin(\\alpha) & 0 & 0\\\\ sin(\\alpha) & cos(\\alpha) & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}\\)","title":"3.1 Rotation around x-, y-, or z-axis"},{"location":"GAMES101/Lecture04/","text":"Viewing (\u89c2\u6d4b) transformation 1. View (\u89c6\u56fe) / Camera transformation Also known as ModelView Transformation Define the camera first Position \\(\\hat e\\) Look-at / gaze direction \\(\\hat g\\) Up direction \\(\\hat t\\) , (assuming perp. to look-at) Transform objects together with the camera Until camera\u2019s at the origin, up at Y, look at -Z Transform the camera by \\(M_{view}\\) - So it\u2019s located at the origin, up at Y, look at -Z \\(M_{view}\\) in math? - Translates e to origin - Rotates g to -Z - Rotates t to Y - Rotates (g x t) To X \\(M_{view} = R_{view}T_{view}\\) \\(T_{view}\\) = \\(\\begin{bmatrix} 1 & 0 & 0 & -x_e \\\\ 0 & 1 & 0 & -y_e\\\\ 0 & 0 & 1 & -z_e \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) \\(R_{view}\\) = \\(\\begin{bmatrix} x_{\\hat g \\times \\hat t} & y_{\\hat g \\times \\hat t} & z_{\\hat g \\times \\hat t} & 0 \\\\ x_t & y_t & z_t & 0\\\\ x_{-g} & y_{-g} & z_{-g} & 0 \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) why do we need this? For projection transformation! 2. Projection(\u6295\u5f71) transformation 3D to 2D Orthographic projection \u6b63\u4ea4\u6295\u5f71 Perspective projection \u900f\u89c6\u6295\u5f71 2.1 Orthographic (\u6b63\u4ea4) projection We want to map a cuboid [l, r] x [b, t] x [f, n] to the \u201ccanonical (\u6b63\u5219\u3001\u89c4\u8303\u3001\u6807\u51c6)\u201d cube [-1, 1] \\(^3\\) Center cuboid by translating Scale into \u201ccanonical\u201d cube Translate (center to origin) first, then scale (length/width/height to 2) \\(M_{ortho}\\) = \\(\\begin{bmatrix} \\frac {2}{r-l} & 0 & 0 & 0 \\\\ 0 & \\frac {2}{t-b} & 0 & 0\\\\ 0 & 0 & \\frac {2}{n-f} & 0 \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) \\(\\begin{bmatrix} 0 & 0 & 0 & -\\frac{r+l}{2} \\\\ 0 & 0 & 0 & -\\frac{t+b}{2}\\\\ 0 & 0 & 0 & -\\frac{n+f}{2} \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) Caveat Looking at / along -Z is making near and far not intuitive (n > f) FYI: that\u2019s why OpenGL (a Graphics API) uses left hand coords 2.2 Perspective (\u900f\u89c6) projection \u591a\u89c1\u4e8e\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3001\u7f8e\u672f\u3001\u89c6\u89c9\u7cfb\u7edf \u8d8a\u8fdc\u7684\u7269\u4f53\u8d8a\u5c0f \u5e73\u884c\u7ebf\u4e0d\u5e73\u884c\uff0c\u6536\u655b\u5230\u5355\u70b9 Recall: property of homogeneous coordinates \\((x, y, z, 1), (kx, ky, kz, k != 0), (xz, yz, z^2, z != 0)\\) all represent the same point \\((x, y, z)\\) in 3D e.g. (1, 0, 0, 1) and (2, 0, 0, 2) both represent (1, 0, 0) How to do perspective projection ? First \u201csquish\u201d the frustum into a cuboid (n -> n, f -> f) ( \\(M_{persp->ortho})\\) Do orthographic projection ( \\(M_{ortho}\\) , already known!) \u901a\u8fc7\u6324\u538b\u540e\u7684 \\(x,y\\) \u5f97\u5230\u6324\u538b\u540e\u7684\u70b9\uff0c\u6839\u636e\u76f8\u4f3c\u4e09\u89d2\u5f62\u7279\u6027\uff0c\u63a8\u51fa\u70b9 \\((nx,ny,unknown,z)\\) ,\u53ef\u5f97\u77e9\u9635\u76841\uff0c2\uff0c4\u884c\u3002\uff08 n\u672a\u77e5,\u4e3a\u6324\u538b\u540e\u7684\u70b9\u5728z\u8f74\u4e0a\u8ddd\u539f\u70b9\u7684\u8ddd\u79bb \uff09 \u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u7279\u70b9\uff0c\u901a\u8fc7\u4ee3\u5165\u4e24\u4e2a\u7279\u6b8a\u70b9\u8fd1\u5e73\u9762 \\((x,y,n,1)\\) \uff0c\u8fdc\u5e73\u9762 \\((0,0,f)\\) \u5f97\u5230\u7b2c\u4e09\u884c\u3002 Any point on the near plane will not change Any point\u2019s z on the far plane will not change \u6700\u7ec8\u77e9\u9635\u7ed3\u679c\u5982\u4e0b\uff1a \\(M_{persp->ortho}\\) = \\(\\begin{bmatrix} n & 0 & 0 & 0 \\\\ 0 & n & 0 & 0\\\\ 0 & 0 & n+f & -nf \\\\ 0 & 0 & 1 & 0 \\end{bmatrix}\\) \u4e00\u4e9b\u8f6c\u6362 vertical field-of-view (fovY) \u5782\u76f4\u89c6\u89d2\uff0c\u89c6\u91ce aspect ratio \u5bbd\u9ad8\u6bd4 (assume symmetry i.e. l = -r, b = -t) How to convert from fovY and aspect to l, r, b, t \\(tan \\frac{fovY}{2} = \\frac{t}{|n|}\\) \\(aspect = \\frac{r}{t}\\)","title":"Lecture04 \u53d8\u6362\uff08\u6a21\u578b\u3001\u89c6\u56fe\u3001\u6295\u5f71\uff09"},{"location":"GAMES101/Lecture04/#viewing-transformation","text":"","title":"Viewing (\u89c2\u6d4b) transformation"},{"location":"GAMES101/Lecture04/#1-view-camera-transformation","text":"Also known as ModelView Transformation Define the camera first Position \\(\\hat e\\) Look-at / gaze direction \\(\\hat g\\) Up direction \\(\\hat t\\) , (assuming perp. to look-at) Transform objects together with the camera Until camera\u2019s at the origin, up at Y, look at -Z Transform the camera by \\(M_{view}\\) - So it\u2019s located at the origin, up at Y, look at -Z","title":"1. View (\u89c6\u56fe) / Camera transformation"},{"location":"GAMES101/Lecture04/#m_view-in-math","text":"- Translates e to origin - Rotates g to -Z - Rotates t to Y - Rotates (g x t) To X \\(M_{view} = R_{view}T_{view}\\) \\(T_{view}\\) = \\(\\begin{bmatrix} 1 & 0 & 0 & -x_e \\\\ 0 & 1 & 0 & -y_e\\\\ 0 & 0 & 1 & -z_e \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) \\(R_{view}\\) = \\(\\begin{bmatrix} x_{\\hat g \\times \\hat t} & y_{\\hat g \\times \\hat t} & z_{\\hat g \\times \\hat t} & 0 \\\\ x_t & y_t & z_t & 0\\\\ x_{-g} & y_{-g} & z_{-g} & 0 \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) why do we need this? For projection transformation!","title":"\\(M_{view}\\) in math?"},{"location":"GAMES101/Lecture04/#2-projection-transformation","text":"3D to 2D Orthographic projection \u6b63\u4ea4\u6295\u5f71 Perspective projection \u900f\u89c6\u6295\u5f71","title":"2. Projection(\u6295\u5f71)  transformation"},{"location":"GAMES101/Lecture04/#21-orthographic-projection","text":"We want to map a cuboid [l, r] x [b, t] x [f, n] to the \u201ccanonical (\u6b63\u5219\u3001\u89c4\u8303\u3001\u6807\u51c6)\u201d cube [-1, 1] \\(^3\\) Center cuboid by translating Scale into \u201ccanonical\u201d cube Translate (center to origin) first, then scale (length/width/height to 2) \\(M_{ortho}\\) = \\(\\begin{bmatrix} \\frac {2}{r-l} & 0 & 0 & 0 \\\\ 0 & \\frac {2}{t-b} & 0 & 0\\\\ 0 & 0 & \\frac {2}{n-f} & 0 \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) \\(\\begin{bmatrix} 0 & 0 & 0 & -\\frac{r+l}{2} \\\\ 0 & 0 & 0 & -\\frac{t+b}{2}\\\\ 0 & 0 & 0 & -\\frac{n+f}{2} \\\\ 0 & 0 & 0 &1 \\end{bmatrix}\\) Caveat Looking at / along -Z is making near and far not intuitive (n > f) FYI: that\u2019s why OpenGL (a Graphics API) uses left hand coords","title":"2.1 Orthographic (\u6b63\u4ea4) projection"},{"location":"GAMES101/Lecture04/#22-perspective-projection","text":"\u591a\u89c1\u4e8e\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3001\u7f8e\u672f\u3001\u89c6\u89c9\u7cfb\u7edf \u8d8a\u8fdc\u7684\u7269\u4f53\u8d8a\u5c0f \u5e73\u884c\u7ebf\u4e0d\u5e73\u884c\uff0c\u6536\u655b\u5230\u5355\u70b9 Recall: property of homogeneous coordinates \\((x, y, z, 1), (kx, ky, kz, k != 0), (xz, yz, z^2, z != 0)\\) all represent the same point \\((x, y, z)\\) in 3D e.g. (1, 0, 0, 1) and (2, 0, 0, 2) both represent (1, 0, 0)","title":"2.2 Perspective (\u900f\u89c6) projection"},{"location":"GAMES101/Lecture04/#how-to-do-perspective-projection","text":"First \u201csquish\u201d the frustum into a cuboid (n -> n, f -> f) ( \\(M_{persp->ortho})\\) Do orthographic projection ( \\(M_{ortho}\\) , already known!) \u901a\u8fc7\u6324\u538b\u540e\u7684 \\(x,y\\) \u5f97\u5230\u6324\u538b\u540e\u7684\u70b9\uff0c\u6839\u636e\u76f8\u4f3c\u4e09\u89d2\u5f62\u7279\u6027\uff0c\u63a8\u51fa\u70b9 \\((nx,ny,unknown,z)\\) ,\u53ef\u5f97\u77e9\u9635\u76841\uff0c2\uff0c4\u884c\u3002\uff08 n\u672a\u77e5,\u4e3a\u6324\u538b\u540e\u7684\u70b9\u5728z\u8f74\u4e0a\u8ddd\u539f\u70b9\u7684\u8ddd\u79bb \uff09 \u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u7279\u70b9\uff0c\u901a\u8fc7\u4ee3\u5165\u4e24\u4e2a\u7279\u6b8a\u70b9\u8fd1\u5e73\u9762 \\((x,y,n,1)\\) \uff0c\u8fdc\u5e73\u9762 \\((0,0,f)\\) \u5f97\u5230\u7b2c\u4e09\u884c\u3002 Any point on the near plane will not change Any point\u2019s z on the far plane will not change \u6700\u7ec8\u77e9\u9635\u7ed3\u679c\u5982\u4e0b\uff1a \\(M_{persp->ortho}\\) = \\(\\begin{bmatrix} n & 0 & 0 & 0 \\\\ 0 & n & 0 & 0\\\\ 0 & 0 & n+f & -nf \\\\ 0 & 0 & 1 & 0 \\end{bmatrix}\\)","title":"How to do perspective projection ?"},{"location":"GAMES101/Lecture04/#_1","text":"vertical field-of-view (fovY) \u5782\u76f4\u89c6\u89d2\uff0c\u89c6\u91ce aspect ratio \u5bbd\u9ad8\u6bd4 (assume symmetry i.e. l = -r, b = -t) How to convert from fovY and aspect to l, r, b, t \\(tan \\frac{fovY}{2} = \\frac{t}{|n|}\\) \\(aspect = \\frac{r}{t}\\)","title":"\u4e00\u4e9b\u8f6c\u6362"},{"location":"GAMES101/Lecture05/","text":"\u5149\u6805\u5316\uff08\u4e09\u89d2\u5f62\u7684\u79bb\u6563\u5316\uff09 Rasterization 1 (Triangles) MVP Model transformation (placing objects) View transformation (placing camera) Projection transformation Orthographic projection (cuboid to \u201ccanonical\u201d cube [-1, 1] \\(^3\\) ) Perspective projection (frustum to \u201ccanonical\u201d cube) 1. Canonical Cube to Screen What is a screen? An array of pixels Size of the array: resolution A typical kind of raster display Raster == screen in German Rasterize == drawing onto the screen Pixel (FYI, short for \u201cpicture element\u201d) For now: A pixel is a little square with uniform color Color is a mixture of (red, green, blue) \u6b65\u9aa4 Irrelevant to z Transform in xy plane: [-1, 1]2 to [0, width] x [0, height] Viewport(\u89c6\u53e3) transform matrix: \\(M_{viewport}\\) = \\(\\begin{bmatrix} \\frac{width}{2} & 0 & 0 & \\frac{width}{2} \\\\ 0 & \\frac{heigst}{2} & 0 & \\frac{heigst}{2}\\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}\\) Rasterizing Triangles into Pixels 2. Drawing to Raster Displays 2.1 Triangles - Fundamental Shape Primitives Why triangles? Most basic polygon Break up other polygons Unique properties Guaranteed to be planar Well-defined interior Well-defined method for interpolating values at vertices over triangle (barycentric interpolation \u91cd\u5fc3\u5750\u6807) A Simple Approach: Sampling Sample If Each Pixel Center Is Inside Triangle Inside? Recall: Three Cross Products! \u5168\u4e3a\u6b63\u6216\u5168\u4e3a\u8d1f\u5373\u5728\u4e09\u89d2\u5f62\u5185\u90e8 Checking All Pixels on the Screen? Use a Bounding Box!","title":"Lecture05 \u5149\u6805\u5316\uff08\u4e09\u89d2\u5f62\u7684\u79bb\u6563\u5316\uff09"},{"location":"GAMES101/Lecture05/#rasterization-1-triangles","text":"","title":"\u5149\u6805\u5316\uff08\u4e09\u89d2\u5f62\u7684\u79bb\u6563\u5316\uff09 Rasterization 1 (Triangles)"},{"location":"GAMES101/Lecture05/#mvp","text":"Model transformation (placing objects) View transformation (placing camera) Projection transformation Orthographic projection (cuboid to \u201ccanonical\u201d cube [-1, 1] \\(^3\\) ) Perspective projection (frustum to \u201ccanonical\u201d cube)","title":"MVP"},{"location":"GAMES101/Lecture05/#1-canonical-cube-to-screen","text":"","title":"1. Canonical Cube to Screen"},{"location":"GAMES101/Lecture05/#what-is-a-screen","text":"An array of pixels Size of the array: resolution A typical kind of raster display","title":"What is a screen?"},{"location":"GAMES101/Lecture05/#raster-screen-in-german","text":"Rasterize == drawing onto the screen","title":"Raster == screen in German"},{"location":"GAMES101/Lecture05/#pixel-fyi-short-for-picture-element","text":"For now: A pixel is a little square with uniform color Color is a mixture of (red, green, blue)","title":"Pixel (FYI, short for \u201cpicture element\u201d)"},{"location":"GAMES101/Lecture05/#_1","text":"Irrelevant to z Transform in xy plane: [-1, 1]2 to [0, width] x [0, height] Viewport(\u89c6\u53e3) transform matrix: \\(M_{viewport}\\) = \\(\\begin{bmatrix} \\frac{width}{2} & 0 & 0 & \\frac{width}{2} \\\\ 0 & \\frac{heigst}{2} & 0 & \\frac{heigst}{2}\\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}\\) Rasterizing Triangles into Pixels","title":"\u6b65\u9aa4"},{"location":"GAMES101/Lecture05/#2-drawing-to-raster-displays","text":"","title":"2. Drawing to Raster Displays"},{"location":"GAMES101/Lecture05/#21-triangles-fundamental-shape-primitives","text":"","title":"2.1 Triangles - Fundamental Shape Primitives"},{"location":"GAMES101/Lecture05/#why-triangles","text":"Most basic polygon Break up other polygons","title":"Why triangles?"},{"location":"GAMES101/Lecture05/#unique-properties","text":"Guaranteed to be planar Well-defined interior Well-defined method for interpolating values at vertices over triangle (barycentric interpolation \u91cd\u5fc3\u5750\u6807)","title":"Unique properties"},{"location":"GAMES101/Lecture05/#a-simple-approach-sampling","text":"Sample If Each Pixel Center Is Inside Triangle Inside? Recall: Three Cross Products! \u5168\u4e3a\u6b63\u6216\u5168\u4e3a\u8d1f\u5373\u5728\u4e09\u89d2\u5f62\u5185\u90e8","title":"A Simple Approach: Sampling"},{"location":"GAMES101/Lecture05/#checking-all-pixels-on-the-screen","text":"Use a Bounding Box!","title":"Checking All Pixels on the Screen?"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/","text":"\u57fa\u7840\u77e5\u8bc6 1.\u5927\u62ec\u53f7\u521d\u59cb\u5316 \u4e0d\u5e78\u7684\u662f\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u4e0d\u80fd\u7528\u4e8e\u6240\u6709\u7c7b\u578b\u7684\u521d\u59cb\u5316\uff08\u4f8b\u5982\u7528\u6570\u636e\u5217\u8868\u521d\u59cb\u5316\u5bf9\u8c61\uff09\u3002\u4e3a\u4e86\u63d0\u4f9b\u66f4\u4e00\u81f4\u7684\u521d\u59cb\u5316\u673a\u5236\uff0c\u6709\u4f7f\u7528\u82b1\u62ec\u53f7\u7684\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff08\u4e5f\u79f0\u4e3a\u7edf\u4e00\u521d\u59cb\u5316\u6216\u5217\u8868\u521d\u59cb\u5316\uff09\u3002 \u5927\u62ec\u53f7\u521d\u59cb\u5316\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a int width { 5 }; // direct brace initialization of value 5 into variable width (preferred) int height = { 6 }; // copy brace initialization of value 6 into variable height int depth {}; // value initialization (see next section) \u76f4\u63a5\u548c\u590d\u5236\u5927\u62ec\u53f7\u521d\u59cb\u5316\u51fd\u6570\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u901a\u5e38\u9996\u9009\u76f4\u63a5\u5f62\u5f0f\u3002 \u5927\u62ec\u53f7\u521d\u59cb\u5316\u5177\u6709\u4e0d\u5141\u8bb8\u201c\u7f29\u5c0f\u201d\u8f6c\u6362\u7684\u989d\u5916\u597d\u5904\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u4f7f\u7528\u5927\u62ec\u53f7\u521d\u59cb\u5316\u6765\u4f7f\u7528\u65e0\u6cd5\u5b89\u5168\u4fdd\u5b58\u7684\u503c\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u5c06\u629b\u51fa\u8b66\u544a\u6216\u9519\u8bef\u3002\u4f8b\u5982\uff1a int width { 4.5 }; // error: not all double values fit into an int \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u8bd5\u56fe\u5c06\u4e00\u4e2a\u5177\u6709\u5c0f\u6570\u90e8\u5206\uff080.5 \u90e8\u5206\uff09\u7684\u6570\u5b57\uff084.5\uff09\u5206\u914d\u7ed9\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\uff08\u5b83\u53ea\u80fd\u4fdd\u5b58\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\uff09\u3002\u590d\u5236\u548c\u76f4\u63a5\u521d\u59cb\u5316\u4f1a\u5220\u9664\u5c0f\u6570\u90e8\u5206\uff0c\u5bfc\u81f4\u5c06\u503c 4 \u521d\u59cb\u5316\u4e3a\u53ef\u53d8\u5bbd\u5ea6\u3002\u4f46\u662f\uff0c\u4f7f\u7528\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u8fd9\u5c06\u5bfc\u81f4\u7f16\u8bd1\u5668\u53d1\u51fa\u9519\u8bef\uff08\u8fd9\u901a\u5e38\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u56e0\u4e3a\u5f88\u5c11\u9700\u8981\u4e22\u5931\u6570\u636e\uff09\u3002\u5141\u8bb8\u5728\u6ca1\u6709\u6f5c\u5728\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u8f6c\u6362\u3002 \u503c\u521d\u59cb\u5316\u548c\u96f6\u521d\u59cb\u5316 \u5f53\u4e00\u4e2a\u53d8\u91cf\u7528\u7a7a\u62ec\u53f7\u521d\u59cb\u5316\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u503c\u521d\u59cb\u5316\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u503c\u521d\u59cb\u5316\u4f1a\u5c06\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u96f6\uff08\u6216\u7a7a\uff0c\u5982\u679c\u8fd9\u66f4\u9002\u5408\u7ed9\u5b9a\u7c7b\u578b\uff09\u3002\u5728\u53d1\u751f\u5f52\u96f6\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79f0\u4e3a\u5f52\u96f6\u521d\u59cb\u5316\u3002 int width {}; // zero initialization to value 0 2.iostream\u7b80\u4ecb\uff1acout\u3001cin\u3001endl \u5bb9\u6613\u6df7\u6dc6 std::cin\u3001std::cout\u3001\u63d2\u5165\u8fd0\u7b97\u7b26 (<<) \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26 (>>)\u3002\u8fd9\u662f\u4e00\u4e2a\u5bb9\u6613\u8bb0\u4f4f\u7684\u65b9\u6cd5\uff1a 'std::cin' \u548c 'std::cout' \u603b\u662f\u5728\u8bed\u53e5\u7684\u5de6\u4fa7\u3002 'std::cout' \u7528\u4e8e\u8f93\u51fa\u4e00\u4e2a\u503c\uff08cout = \u5b57\u7b26\u8f93\u51fa\uff09 'std::cin' \u7528\u4e8e\u83b7\u53d6\u8f93\u5165\u503c\uff08cin = \u5b57\u7b26\u8f93\u5165\uff09 '<<' \u4e0e 'std::cout' \u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u663e\u793a\u6570\u636e\u79fb\u52a8\u7684\u65b9\u5411\uff08\u5982\u679c std::cout \u8868\u793a\u63a7\u5236\u53f0\uff0c\u5219\u8f93\u51fa\u6570\u636e\u6b63\u5728\u4ece\u53d8\u91cf\u79fb\u52a8\u5230\u63a7\u5236\u53f0\uff09\u3002std::cout << 4 \u5c06 4 \u7684\u503c\u79fb\u52a8\u5230\u63a7\u5236\u53f0 '>>' \u4e0e std::cin \u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u663e\u793a\u6570\u636e\u79fb\u52a8\u7684\u65b9\u5411\uff08\u5982\u679c std::cin \u8868\u793a\u952e\u76d8\uff0c\u5219\u8f93\u5165\u6570\u636e\u6b63\u5728\u4ece\u952e\u76d8\u79fb\u52a8\u5230\u53d8\u91cf\uff09\u3002std::cin >> x \u5c06\u7528\u6237\u4ece\u952e\u76d8\u8f93\u5165\u7684\u503c\u79fb\u52a8\u5230 x std::endl \u4e0e '\\n' \u4f7f\u7528 std::endl \u53ef\u80fd\u6709\u70b9\u4f4e\u6548\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u505a\u4e86\u4e24\u9879\u5de5\u4f5c\uff1a\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u5e76\u201c\u5237\u65b0\u201d\u8f93\u51fa\uff08\u786e\u4fdd\u5b83\u7acb\u5373\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff09\u3002\u5f53\u4f7f\u7528 std::cout \u5c06\u6587\u672c\u5199\u5165\u63a7\u5236\u53f0\u65f6\uff0cstd::cout \u901a\u5e38\u4f1a\u5237\u65b0\u8f93\u51fa\uff08\u5982\u679c\u4e0d\u5237\u65b0\uff0c\u5219\u901a\u5e38\u65e0\u5173\u7d27\u8981\uff09\uff0c\u56e0\u6b64 std::endl \u5237\u65b0\u5e76\u4e0d\u91cd\u8981\u3002 \u56e0\u6b64\uff0c\u901a\u5e38\u9996\u9009\u4f7f\u7528 '\\n' \u5b57\u7b26\u3002'\\n' \u5b57\u7b26\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u4f46\u4e0d\u4f1a\u8fdb\u884c\u5197\u4f59\u5237\u65b0\uff0c\u56e0\u6b64\u5b83\u7684\u6027\u80fd\u66f4\u597d\u3002'\\n' \u5b57\u7b26\u4e5f\u66f4\u5bb9\u6613\u9605\u8bfb\uff0c\u56e0\u4e3a\u5b83\u66f4\u77ed\u5e76\u4e14\u53ef\u4ee5\u5d4c\u5165\u5230\u73b0\u6709\u6587\u672c\u4e2d\u3002 \u8fd9\u662f\u4e00\u4e2a\u4ee5\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528 '\\n' \u7684\u793a\u4f8b\uff1a #include <iostream> // for std::cout int main () { int x { 5 }; std :: cout << \"x is equal to: \" << x << '\\n' ; // Using '\\n' standalone std :: cout << \"And that's all, folks! \\n \" ; // Using '\\n' embedded into a double-quoted piece of text (note: no single quotes when used this way) return 0 ; } Best practice \u5c06\u6587\u672c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u65f6\uff0c\u9996\u9009 '\\n' \u800c\u4e0d\u662f std::endl\u3002 3.\u57fa\u672c\u683c\u5f0f\u7684\u5efa\u8bae 1.\u5236\u8868\u7b26\u8bbe\u7f6e\u4e3a 4 \u4e2a\u7f29\u8fdb\u7a7a\u683c 2.\u5982\u679c\u7528\u8fd0\u7b97\u7b26\uff08\u4f8b\u5982 << \u6216 +\uff09\u62c6\u5206\u957f\u884c\uff0c\u5219\u5e94\u5c06\u8fd0\u7b97\u7b26\u653e\u5728\u4e0b\u4e00\u884c\u7684\u5f00\u5934\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u884c\u7684\u7ed3\u5c3e std :: cout << 3 + 4 + 5 + 6 * 7 * 8 ; 3.\u901a\u8fc7\u5bf9\u9f50\u503c\u6216\u6ce8\u91ca\u6216\u5728\u4ee3\u7801\u5757\u4e4b\u95f4\u6dfb\u52a0\u95f4\u8ddd\uff0c\u4f7f\u7528\u7a7a\u683c\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u6613\u4e8e\u9605\u8bfb\u3002 cost = 57 ; pricePerItem = 24 ; value = 5 ; numberOfItems = 17 ; std :: cout << \"Hello world! \\n \" ; // cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments are easier to read std :: cout << \"Yeah! \\n \" ; // especially when all lined up 4.\u8868\u8fbe\u5f0f // five() is a function that returns the value 5 int five () { return 5 ; } int main () { int a { 2 }; // initialize variable a with literal value 2 int b { 2 + 3 }; // initialize variable b with computed value 5 int c { ( 2 * 3 ) + 4 }; // initialize variable c with computed value 10 int d { b }; // initialize variable d with variable value 5 int e { five () }; // initialize variable e with function return value 5 return 0 ; } \u8868\u8fbe\u5f0f\u662f\u53ef\u4ee5\u6267\u884c\u4ee5\u4ea7\u751f\u5947\u5f02\u503c\u7684\u6587\u5b57\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u8c03\u7528\u7684\u7ec4\u5408\u3002\u6267\u884c\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\u79f0\u4e3a\u6c42\u503c\uff0c\u4ea7\u751f\u7684\u5355\u4e2a\u503c\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 5.\u524d\u5411\u58f0\u660e\u548c\u5b9a\u4e49\u5411\u524d\u58f0\u660e\u548c\u5b9a\u4e49 \u524d\u5411\u58f0\u660e\u5141\u8bb8\u6211\u4eec\u5728\u5b9e\u9645\u5b9a\u4e49\u6807\u8bc6\u7b26\u4e4b\u524d\u544a\u8bc9\u7f16\u8bd1\u5668\u6807\u8bc6\u7b26\u7684\u5b58\u5728\u3002 \u5bf9\u4e8e\u51fd\u6570\uff0c\u8fd9\u5141\u8bb8\u6211\u4eec\u5728\u5b9a\u4e49\u51fd\u6570\u4f53\u4e4b\u524d\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u7684\u5b58\u5728\u3002\u8fd9\u6837\uff0c\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u5bf9\u51fd\u6570\u7684\u8c03\u7528\u65f6\uff0c\u5b83\u4f1a\u77e5\u9053\u6211\u4eec\u6b63\u5728\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u68c0\u67e5\u4ee5\u786e\u4fdd\u6211\u4eec\u6b63\u786e\u8c03\u7528\u51fd\u6570\uff0c\u5373\u4f7f\u5b83\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u6216\u5728\u54ea\u91cc\u529f\u80fd\u5df2\u5b9a\u4e49\u3002 \u8981\u4e3a\u51fd\u6570\u7f16\u5199\u524d\u5411\u58f0\u660e\uff0c\u6211\u4eec\u4f7f\u7528\u79f0\u4e3a\u51fd\u6570\u539f\u578b\u7684\u58f0\u660e\u8bed\u53e5\u3002\u51fd\u6570\u539f\u578b\u7531\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3001\u540d\u79f0\u3001\u53c2\u6570\u7ec4\u6210\uff0c\u4f46\u6ca1\u6709\u51fd\u6570\u4f53\uff08\u82b1\u62ec\u53f7\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u6240\u6709\u5185\u5bb9\uff09\uff0c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u8fd9\u662f add \u51fd\u6570\u7684\u51fd\u6570\u539f\u578b\uff1a int add ( int x , int y ); // function prototype includes return type, name, parameters, and semicolon. No function body! \u73b0\u5728\uff0c\u8fd9\u662f\u6211\u4eec\u6ca1\u6709\u7f16\u8bd1\u7684\u539f\u59cb\u7a0b\u5e8f\uff0c\u4f7f\u7528\u51fd\u6570\u539f\u578b\u4f5c\u4e3a\u51fd\u6570 add \u7684\u524d\u5411\u58f0\u660e\uff1a #include <iostream> int add ( int x , int y ); // forward declaration of add() (using a function prototype) int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; // this works because we forward declared add() above return 0 ; } int add ( int x , int y ) // even though the body of add() isn't defined until here { return x + y ; } \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u51fd\u6570\u539f\u578b\u4e0d\u9700\u8981\u6307\u5b9a\u53c2\u6570\u7684\u540d\u79f0\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u60a8\u8fd8\u53ef\u4ee5\u50cf\u8fd9\u6837\u8f6c\u53d1\u58f0\u660e\u60a8\u7684\u51fd\u6570\uff1a int add ( int , int ); // valid function prototype \u4f46\u662f\uff0c\u6211\u4eec\u66f4\u559c\u6b22\u7ed9\u6211\u4eec\u7684\u53c2\u6570\u547d\u540d\uff08\u4f7f\u7528\u4e0e\u5b9e\u9645\u51fd\u6570\u76f8\u540c\u7684\u540d\u79f0\uff09\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u8ba9\u60a8\u901a\u8fc7\u67e5\u770b\u539f\u578b\u6765\u4e86\u89e3\u51fd\u6570\u53c2\u6570\u662f\u4ec0\u4e48\u3002\u5426\u5219\uff0c\u60a8\u5fc5\u987b\u627e\u5230\u51fd\u6570\u5b9a\u4e49\u3002 \u8f6c\u53d1\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u4f46\u6ca1\u6709\u5b9a\u4e49\u5b83\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u89c6\u60c5\u51b5\u800c\u5b9a\u3002\u5982\u679c\u8fdb\u884c\u4e86\u524d\u5411\u58f0\u660e\uff0c\u4f46\u4ece\u672a\u8c03\u7528\u8fc7\u8be5\u51fd\u6570\uff0c\u5219\u7a0b\u5e8f\u5c06\u7f16\u8bd1\u5e76\u8fd0\u884c\u826f\u597d\u3002\u4f46\u662f\uff0c\u5982\u679c\u8fdb\u884c\u4e86\u524d\u5411\u58f0\u660e\u5e76\u8c03\u7528\u4e86\u8be5\u51fd\u6570\uff0c\u4f46\u7a0b\u5e8f\u4ece\u672a\u5b9a\u4e49\u8be5\u51fd\u6570\uff0c\u5219\u7a0b\u5e8f\u5c06\u6b63\u5e38\u7f16\u8bd1\uff0c\u4f46\u94fe\u63a5\u5668\u4f1a\u62b1\u6028\u5b83\u65e0\u6cd5\u89e3\u6790\u51fd\u6570\u8c03\u7528\u3002 6. \u5305\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u7a0b\u5e8f main.cpp\uff08\u5e26\u6709\u524d\u5411\u58f0\u660e\uff09\uff1a #include <iostream> int add ( int x , int y ); // needed so main.cpp knows that add() is a function declared elsewhere int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } add.cpp\uff08\u4fdd\u6301\u4e0d\u53d8\uff09\uff1a int add ( int x , int y ) { return x + y ; } \u5f53\u7f16\u8bd1\u5668\u7f16\u8bd1 main.cpp \u65f6\uff0c\u5b83\u4f1a\u77e5\u9053 add \u662f\u4ec0\u4e48\u6807\u8bc6\u7b26\u5e76\u5f97\u5230\u6ee1\u8db3\u3002\u94fe\u63a5\u5668\u4f1a\u5c06 main.cpp \u4e2d\u7684 add \u51fd\u6570\u8c03\u7528\u8fde\u63a5\u5230 add.cpp \u4e2d\u7684\u51fd\u6570 add \u5b9a\u4e49\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u6587\u4ef6\u8bbf\u95ee\u5b58\u5728\u4e8e\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u3002 7.Header files \u5934\u6587\u4ef6 \u968f\u7740\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff08\u5e76\u4f7f\u7528\u66f4\u591a\u6587\u4ef6\uff09\uff0c\u5fc5\u987b\u8f6c\u53d1\u58f0\u660e\u60a8\u8981\u4f7f\u7528\u7684\u6bcf\u4e2a\u5728\u4e0d\u540c\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u53d8\u5f97\u8d8a\u6765\u8d8a\u4e4f\u5473\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u524d\u5411\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u7136\u540e\u5728\u9700\u8981\u65f6\u5bfc\u5165\u5b83\u4eec\uff0c\u90a3\u4e0d\u662f\u5f88\u597d\u5417\uff1f \u5934\u6587\u4ef6\u5141\u8bb8\u6211\u4eec\u5c06\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5728\u9700\u8981\u5b83\u4eec\u7684\u5730\u65b9\u5bfc\u5165\u5b83\u4eec\u3002\u8fd9\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u5728\u591a\u6587\u4ef6\u7a0b\u5e8f\u4e2d\u7684\u8f93\u5165\u3002 Using standard library header files #include <iostream> int main () { std :: cout << \"Hello, world!\" ; return 0 ; } \u7b54\u6848\u662f std::cout \u5df2\u5728\u201ciostream\u201d\u5934\u6587\u4ef6\u4e2d\u524d\u5411\u58f0\u660e\u3002\u5f53\u6211\u4eec#include\uff0c\u6211\u4eec\u8981\u6c42\u9884\u5904\u7406\u5668\u5c06\u6240\u6709\u5185\u5bb9\uff08\u5305\u62ec std::cout \u7684\u524d\u5411\u58f0\u660e\uff09\u4ece\u540d\u4e3a\u201ciostream\u201d\u7684\u6587\u4ef6\u590d\u5236\u5230\u6267\u884c#include \u7684\u6587\u4ef6\u4e2d\u3002 \u5f53#include \u6587\u4ef6\u65f6\uff0c\u5305\u542b\u6587\u4ef6\u7684\u5185\u5bb9\u5c06\u63d2\u5165\u5230\u5305\u542b\u70b9\u3002\u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u63d0\u53d6\u58f0\u660e\u7684\u6709\u7528\u65b9\u6cd5\u3002 \u5f53\u6d89\u53ca\u5230\u51fd\u6570\u548c\u53d8\u91cf\u65f6\uff0c\u503c\u5f97\u8bb0\u4f4f\u7684\u662f\uff0c\u5934\u6587\u4ef6\u901a\u5e38\u53ea\u5305\u542b\u51fd\u6570\u548c\u53d8\u91cf\u58f0\u660e\uff0c\u800c\u4e0d\u5305\u542b\u51fd\u6570\u548c\u53d8\u91cf\u5b9a\u4e49\uff08\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u8fdd\u53cd\u5355\u4e00\u5b9a\u4e49\u89c4\u5219\uff09 \u7f16\u5199\u81ea\u5df1\u7684\u5934\u6587\u4ef6 \u5934\u6587\u4ef6\u53ea\u5305\u542b\u4e24\u90e8\u5206: 1. A header guard \u5934\u6587\u4ef6\u4fdd\u62a4\u7b26 2. \u5934\u6587\u4ef6\u7684\u5b9e\u9645\u5185\u5bb9\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u5e0c\u671b\u5176\u4ed6\u6587\u4ef6\u80fd\u591f\u770b\u5230\u7684\u6240\u6709\u6807\u8bc6\u7b26\u7684\u524d\u5411\u58f0\u660e\u3002 \u6e90\u6587\u4ef6\u5e94\u8be5\u5305\u62ec\u5b83\u4eec\u7684\u914d\u5bf9\u5934\u6587\u4ef6 something.h: int something ( int ); // return type of forward declaration is int something.cpp: #include \"something.h\" void something ( int ) // error: wrong return type { } \u56e0\u4e3a something.cpp #includes something.h\uff0c\u7f16\u8bd1\u5668\u4f1a\u6ce8\u610f\u5230\u51fd\u6570 something() \u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u5e76\u7ed9\u6211\u4eec\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u3002\u5982\u679csomething.cpp \u6ca1\u6709#include something.h\uff0c\u6211\u4eec\u5fc5\u987b\u7b49\u5230\u94fe\u63a5\u5668\u53d1\u73b0\u5dee\u5f02\uff0c\u8fd9\u4f1a\u6d6a\u8d39\u65f6\u95f4\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u6b64\u8bc4\u8bba\u3002 \u5c16\u62ec\u53f7\u4e0e\u53cc\u5f15\u53f7 \u5f53\u6211\u4eec\u4f7f\u7528\u5c16\u62ec\u53f7\u65f6\uff0c\u6211\u4eec\u662f\u5728\u544a\u8bc9\u9884\u5904\u7406\u5668\u8fd9\u662f\u4e00\u4e2a\u4e0d\u662f\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u5934\u6587\u4ef6\u3002\u7f16\u8bd1\u5668\u5c06\u4ec5\u5728\u5305\u542b\u76ee\u5f55\u6307\u5b9a\u7684\u76ee\u5f55\u4e2d\u641c\u7d22\u5934\u6587\u4ef6\u3002\u5305\u542b\u76ee\u5f55\u914d\u7f6e\u4e3a\u9879\u76ee/IDE \u8bbe\u7f6e/\u7f16\u8bd1\u5668\u8bbe\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u901a\u5e38\u9ed8\u8ba4\u4e3a\u5305\u542b\u7f16\u8bd1\u5668\u548c/\u6216\u64cd\u4f5c\u7cfb\u7edf\u9644\u5e26\u7684\u5934\u6587\u4ef6\u7684\u76ee\u5f55\u3002\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5728\u9879\u76ee\u7684\u6e90\u4ee3\u7801\u76ee\u5f55\u4e2d\u641c\u7d22\u5934\u6587\u4ef6\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u53cc\u5f15\u53f7\u65f6\uff0c\u6211\u4eec\u662f\u5728\u544a\u8bc9\u9884\u5904\u7406\u5668\u8fd9\u662f\u6211\u4eec\u7f16\u5199\u7684\u5934\u6587\u4ef6\u3002\u7f16\u8bd1\u5668\u5c06\u9996\u5148\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u641c\u7d22\u5934\u6587\u4ef6\u3002\u5982\u679c\u5728\u90a3\u91cc\u627e\u4e0d\u5230\u5339\u914d\u7684\u6807\u5934\uff0c\u5b83\u5c06\u641c\u7d22\u5305\u542b\u76ee\u5f55\u3002 Note \u4f7f\u7528\u53cc\u5f15\u53f7\u6765\u5305\u542b\u60a8\u5df2\u7f16\u5199\u6216\u9884\u671f\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u627e\u5230\u7684\u5934\u6587\u4ef6\u3002\u4f7f\u7528\u5c16\u62ec\u53f7\u6765\u5305\u542b\u60a8\u7684\u7f16\u8bd1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u6216\u60a8\u5728\u7cfb\u7edf\u5176\u4ed6\u5730\u65b9\u5b89\u88c5\u7684\u7b2c\u4e09\u65b9\u5e93\u9644\u5e26\u7684\u5934\u6587\u4ef6\u3002 Header file best practices \u59cb\u7ec8\u5305\u62ec\u5934\u5b88\u536b\uff08\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8bfe\u4e2d\u4ecb\u7ecd\u8fd9\u4e9b\u5185\u5bb9\uff09\u3002 \u4e0d\u8981\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u53d8\u91cf\u548c\u51fd\u6570\uff08\u5168\u5c40\u5e38\u91cf\u662f\u4e00\u4e2a\u4f8b\u5916\u2014\u2014\u6211\u4eec\u7a0d\u540e\u4f1a\u4ecb\u7ecd\uff09 \u4e3a\u60a8\u7684\u5934\u6587\u4ef6\u63d0\u4f9b\u4e0e\u5b83\u4eec\u5173\u8054\u7684\u6e90\u6587\u4ef6\u76f8\u540c\u7684\u540d\u79f0\uff08\u4f8b\u5982\uff0cgrades.h \u4e0egrades.cpp \u914d\u5bf9\uff09\u3002 \u6bcf\u4e2a\u5934\u6587\u4ef6\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u72ec\u7acb\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u4e0e\u529f\u80fd A \u76f8\u5173\u7684\u58f0\u660e\u653e\u5728 Ah \u4e2d\uff0c\u5c06\u6240\u6709\u4e0e\u529f\u80fd B \u76f8\u5173\u7684\u58f0\u660e\u653e\u5728 Bh \u4e2d\u3002\u8fd9\u6837\uff0c\u5982\u679c\u60a8\u4ee5\u540e\u53ea\u5173\u5fc3 A\uff0c\u5219\u53ef\u4ee5\u53ea\u5305\u542b Ah \u800c\u4e0d\u4f1a\u83b7\u5f97\u4e0e B \u76f8\u5173\u7684\u4efb\u4f55\u5185\u5bb9. \u8bf7\u6ce8\u610f\u60a8\u9700\u8981\u4e3a\u60a8\u5728\u4ee3\u7801\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u529f\u80fd\u663e\u5f0f\u5305\u542b\u54ea\u4e9b\u6807\u5934 \u60a8\u7f16\u5199\u7684\u6bcf\u4e2a\u6807\u5934\u90fd\u5e94\u8be5\u81ea\u5df1\u7f16\u8bd1\uff08\u5b83\u5e94\u8be5#include\u5b83\u9700\u8981\u7684\u6bcf\u4e2a\u4f9d\u8d56\u9879\uff09 \u4ec5 #include \u60a8\u9700\u8981\u7684\u5185\u5bb9\uff08\u4e0d\u8981\u4ec5\u4ec5\u56e0\u4e3a\u53ef\u4ee5\u5305\u542b\u6240\u6709\u5185\u5bb9\uff09\u3002 \u4e0d\u8981#include .cpp \u6587\u4ef6\u3002 8.header guard \u5934\u6587\u4ef6\u4fdd\u62a4 \u5bf9\u4e8e\u5934\u6587\u4ef6\uff0c\u5f88\u5bb9\u6613\u5bfc\u81f4\u5934\u6587\u4ef6\u4e2d\u7684\u5b9a\u4e49\u88ab\u591a\u6b21\u5305\u542b\u7684\u60c5\u51b5\u3002\u5f53\u4e00\u4e2a\u5934\u6587\u4ef6#includes\u53e6\u4e00\u4e2a\u5934\u6587\u4ef6\uff08\u8fd9\u5f88\u5e38\u89c1\uff09\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u6807\u5934\u4fdd\u62a4\u662f\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\uff1a #ifndef SOME_UNIQUE_NAME_HERE #define SOME_UNIQUE_NAME_HERE // your declarations (and certain types of definitions) here #endif \u4f60\u6240\u6709\u7684\u5934\u6587\u4ef6\u90fd\u5e94\u8be5\u6709\u5934\u6587\u4ef6\u4fdd\u62a4\u3002SOME_UNIQUE_NAME_HERE \u53ef\u4ee5\u662f\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u540d\u79f0\uff0c\u4f46\u6309\u7167\u60ef\u4f8b\u8bbe\u7f6e\u4e3a\u5934\u6587\u4ef6\u7684\u5b8c\u6574\u6587\u4ef6\u540d\uff0c\u5168\u90e8\u5927\u5199\uff0c\u7a7a\u683c\u6216\u6807\u70b9\u4f7f\u7528\u4e0b\u5212\u7ebf\u3002\u4f8b\u5982\uff0c square.h \u5c06\u5177\u6709\u6807\u5934\u4fdd\u62a4\uff1a #ifndef SQUARE_H #define SQUARE_H int getSquareSides (); // forward declaration for getSquareSides int getSquarePerimeter ( int sideLength ); // forward declaration for getSquarePerimeter #endif","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#_1","text":"","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#1","text":"\u4e0d\u5e78\u7684\u662f\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u4e0d\u80fd\u7528\u4e8e\u6240\u6709\u7c7b\u578b\u7684\u521d\u59cb\u5316\uff08\u4f8b\u5982\u7528\u6570\u636e\u5217\u8868\u521d\u59cb\u5316\u5bf9\u8c61\uff09\u3002\u4e3a\u4e86\u63d0\u4f9b\u66f4\u4e00\u81f4\u7684\u521d\u59cb\u5316\u673a\u5236\uff0c\u6709\u4f7f\u7528\u82b1\u62ec\u53f7\u7684\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff08\u4e5f\u79f0\u4e3a\u7edf\u4e00\u521d\u59cb\u5316\u6216\u5217\u8868\u521d\u59cb\u5316\uff09\u3002 \u5927\u62ec\u53f7\u521d\u59cb\u5316\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a int width { 5 }; // direct brace initialization of value 5 into variable width (preferred) int height = { 6 }; // copy brace initialization of value 6 into variable height int depth {}; // value initialization (see next section) \u76f4\u63a5\u548c\u590d\u5236\u5927\u62ec\u53f7\u521d\u59cb\u5316\u51fd\u6570\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u901a\u5e38\u9996\u9009\u76f4\u63a5\u5f62\u5f0f\u3002 \u5927\u62ec\u53f7\u521d\u59cb\u5316\u5177\u6709\u4e0d\u5141\u8bb8\u201c\u7f29\u5c0f\u201d\u8f6c\u6362\u7684\u989d\u5916\u597d\u5904\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u4f7f\u7528\u5927\u62ec\u53f7\u521d\u59cb\u5316\u6765\u4f7f\u7528\u65e0\u6cd5\u5b89\u5168\u4fdd\u5b58\u7684\u503c\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u5c06\u629b\u51fa\u8b66\u544a\u6216\u9519\u8bef\u3002\u4f8b\u5982\uff1a int width { 4.5 }; // error: not all double values fit into an int \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u8bd5\u56fe\u5c06\u4e00\u4e2a\u5177\u6709\u5c0f\u6570\u90e8\u5206\uff080.5 \u90e8\u5206\uff09\u7684\u6570\u5b57\uff084.5\uff09\u5206\u914d\u7ed9\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\uff08\u5b83\u53ea\u80fd\u4fdd\u5b58\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\uff09\u3002\u590d\u5236\u548c\u76f4\u63a5\u521d\u59cb\u5316\u4f1a\u5220\u9664\u5c0f\u6570\u90e8\u5206\uff0c\u5bfc\u81f4\u5c06\u503c 4 \u521d\u59cb\u5316\u4e3a\u53ef\u53d8\u5bbd\u5ea6\u3002\u4f46\u662f\uff0c\u4f7f\u7528\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u8fd9\u5c06\u5bfc\u81f4\u7f16\u8bd1\u5668\u53d1\u51fa\u9519\u8bef\uff08\u8fd9\u901a\u5e38\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u56e0\u4e3a\u5f88\u5c11\u9700\u8981\u4e22\u5931\u6570\u636e\uff09\u3002\u5141\u8bb8\u5728\u6ca1\u6709\u6f5c\u5728\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u8f6c\u6362\u3002","title":"1.\u5927\u62ec\u53f7\u521d\u59cb\u5316"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#_2","text":"\u5f53\u4e00\u4e2a\u53d8\u91cf\u7528\u7a7a\u62ec\u53f7\u521d\u59cb\u5316\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u503c\u521d\u59cb\u5316\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u503c\u521d\u59cb\u5316\u4f1a\u5c06\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u96f6\uff08\u6216\u7a7a\uff0c\u5982\u679c\u8fd9\u66f4\u9002\u5408\u7ed9\u5b9a\u7c7b\u578b\uff09\u3002\u5728\u53d1\u751f\u5f52\u96f6\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79f0\u4e3a\u5f52\u96f6\u521d\u59cb\u5316\u3002 int width {}; // zero initialization to value 0","title":"\u503c\u521d\u59cb\u5316\u548c\u96f6\u521d\u59cb\u5316"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#2iostreamcoutcinendl","text":"\u5bb9\u6613\u6df7\u6dc6 std::cin\u3001std::cout\u3001\u63d2\u5165\u8fd0\u7b97\u7b26 (<<) \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26 (>>)\u3002\u8fd9\u662f\u4e00\u4e2a\u5bb9\u6613\u8bb0\u4f4f\u7684\u65b9\u6cd5\uff1a 'std::cin' \u548c 'std::cout' \u603b\u662f\u5728\u8bed\u53e5\u7684\u5de6\u4fa7\u3002 'std::cout' \u7528\u4e8e\u8f93\u51fa\u4e00\u4e2a\u503c\uff08cout = \u5b57\u7b26\u8f93\u51fa\uff09 'std::cin' \u7528\u4e8e\u83b7\u53d6\u8f93\u5165\u503c\uff08cin = \u5b57\u7b26\u8f93\u5165\uff09 '<<' \u4e0e 'std::cout' \u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u663e\u793a\u6570\u636e\u79fb\u52a8\u7684\u65b9\u5411\uff08\u5982\u679c std::cout \u8868\u793a\u63a7\u5236\u53f0\uff0c\u5219\u8f93\u51fa\u6570\u636e\u6b63\u5728\u4ece\u53d8\u91cf\u79fb\u52a8\u5230\u63a7\u5236\u53f0\uff09\u3002std::cout << 4 \u5c06 4 \u7684\u503c\u79fb\u52a8\u5230\u63a7\u5236\u53f0 '>>' \u4e0e std::cin \u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u663e\u793a\u6570\u636e\u79fb\u52a8\u7684\u65b9\u5411\uff08\u5982\u679c std::cin \u8868\u793a\u952e\u76d8\uff0c\u5219\u8f93\u5165\u6570\u636e\u6b63\u5728\u4ece\u952e\u76d8\u79fb\u52a8\u5230\u53d8\u91cf\uff09\u3002std::cin >> x \u5c06\u7528\u6237\u4ece\u952e\u76d8\u8f93\u5165\u7684\u503c\u79fb\u52a8\u5230 x","title":"2.iostream\u7b80\u4ecb\uff1acout\u3001cin\u3001endl"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#stdendl-n","text":"\u4f7f\u7528 std::endl \u53ef\u80fd\u6709\u70b9\u4f4e\u6548\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u505a\u4e86\u4e24\u9879\u5de5\u4f5c\uff1a\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u5e76\u201c\u5237\u65b0\u201d\u8f93\u51fa\uff08\u786e\u4fdd\u5b83\u7acb\u5373\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff09\u3002\u5f53\u4f7f\u7528 std::cout \u5c06\u6587\u672c\u5199\u5165\u63a7\u5236\u53f0\u65f6\uff0cstd::cout \u901a\u5e38\u4f1a\u5237\u65b0\u8f93\u51fa\uff08\u5982\u679c\u4e0d\u5237\u65b0\uff0c\u5219\u901a\u5e38\u65e0\u5173\u7d27\u8981\uff09\uff0c\u56e0\u6b64 std::endl \u5237\u65b0\u5e76\u4e0d\u91cd\u8981\u3002 \u56e0\u6b64\uff0c\u901a\u5e38\u9996\u9009\u4f7f\u7528 '\\n' \u5b57\u7b26\u3002'\\n' \u5b57\u7b26\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u4f46\u4e0d\u4f1a\u8fdb\u884c\u5197\u4f59\u5237\u65b0\uff0c\u56e0\u6b64\u5b83\u7684\u6027\u80fd\u66f4\u597d\u3002'\\n' \u5b57\u7b26\u4e5f\u66f4\u5bb9\u6613\u9605\u8bfb\uff0c\u56e0\u4e3a\u5b83\u66f4\u77ed\u5e76\u4e14\u53ef\u4ee5\u5d4c\u5165\u5230\u73b0\u6709\u6587\u672c\u4e2d\u3002 \u8fd9\u662f\u4e00\u4e2a\u4ee5\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528 '\\n' \u7684\u793a\u4f8b\uff1a #include <iostream> // for std::cout int main () { int x { 5 }; std :: cout << \"x is equal to: \" << x << '\\n' ; // Using '\\n' standalone std :: cout << \"And that's all, folks! \\n \" ; // Using '\\n' embedded into a double-quoted piece of text (note: no single quotes when used this way) return 0 ; } Best practice \u5c06\u6587\u672c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u65f6\uff0c\u9996\u9009 '\\n' \u800c\u4e0d\u662f std::endl\u3002","title":"std::endl \u4e0e '\\n'"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#3","text":"1.\u5236\u8868\u7b26\u8bbe\u7f6e\u4e3a 4 \u4e2a\u7f29\u8fdb\u7a7a\u683c 2.\u5982\u679c\u7528\u8fd0\u7b97\u7b26\uff08\u4f8b\u5982 << \u6216 +\uff09\u62c6\u5206\u957f\u884c\uff0c\u5219\u5e94\u5c06\u8fd0\u7b97\u7b26\u653e\u5728\u4e0b\u4e00\u884c\u7684\u5f00\u5934\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u884c\u7684\u7ed3\u5c3e std :: cout << 3 + 4 + 5 + 6 * 7 * 8 ; 3.\u901a\u8fc7\u5bf9\u9f50\u503c\u6216\u6ce8\u91ca\u6216\u5728\u4ee3\u7801\u5757\u4e4b\u95f4\u6dfb\u52a0\u95f4\u8ddd\uff0c\u4f7f\u7528\u7a7a\u683c\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u6613\u4e8e\u9605\u8bfb\u3002 cost = 57 ; pricePerItem = 24 ; value = 5 ; numberOfItems = 17 ; std :: cout << \"Hello world! \\n \" ; // cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments are easier to read std :: cout << \"Yeah! \\n \" ; // especially when all lined up","title":"3.\u57fa\u672c\u683c\u5f0f\u7684\u5efa\u8bae"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#4","text":"// five() is a function that returns the value 5 int five () { return 5 ; } int main () { int a { 2 }; // initialize variable a with literal value 2 int b { 2 + 3 }; // initialize variable b with computed value 5 int c { ( 2 * 3 ) + 4 }; // initialize variable c with computed value 10 int d { b }; // initialize variable d with variable value 5 int e { five () }; // initialize variable e with function return value 5 return 0 ; } \u8868\u8fbe\u5f0f\u662f\u53ef\u4ee5\u6267\u884c\u4ee5\u4ea7\u751f\u5947\u5f02\u503c\u7684\u6587\u5b57\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u8c03\u7528\u7684\u7ec4\u5408\u3002\u6267\u884c\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\u79f0\u4e3a\u6c42\u503c\uff0c\u4ea7\u751f\u7684\u5355\u4e2a\u503c\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002","title":"4.\u8868\u8fbe\u5f0f"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#5","text":"\u524d\u5411\u58f0\u660e\u5141\u8bb8\u6211\u4eec\u5728\u5b9e\u9645\u5b9a\u4e49\u6807\u8bc6\u7b26\u4e4b\u524d\u544a\u8bc9\u7f16\u8bd1\u5668\u6807\u8bc6\u7b26\u7684\u5b58\u5728\u3002 \u5bf9\u4e8e\u51fd\u6570\uff0c\u8fd9\u5141\u8bb8\u6211\u4eec\u5728\u5b9a\u4e49\u51fd\u6570\u4f53\u4e4b\u524d\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u7684\u5b58\u5728\u3002\u8fd9\u6837\uff0c\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u5bf9\u51fd\u6570\u7684\u8c03\u7528\u65f6\uff0c\u5b83\u4f1a\u77e5\u9053\u6211\u4eec\u6b63\u5728\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u68c0\u67e5\u4ee5\u786e\u4fdd\u6211\u4eec\u6b63\u786e\u8c03\u7528\u51fd\u6570\uff0c\u5373\u4f7f\u5b83\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u6216\u5728\u54ea\u91cc\u529f\u80fd\u5df2\u5b9a\u4e49\u3002 \u8981\u4e3a\u51fd\u6570\u7f16\u5199\u524d\u5411\u58f0\u660e\uff0c\u6211\u4eec\u4f7f\u7528\u79f0\u4e3a\u51fd\u6570\u539f\u578b\u7684\u58f0\u660e\u8bed\u53e5\u3002\u51fd\u6570\u539f\u578b\u7531\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3001\u540d\u79f0\u3001\u53c2\u6570\u7ec4\u6210\uff0c\u4f46\u6ca1\u6709\u51fd\u6570\u4f53\uff08\u82b1\u62ec\u53f7\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u6240\u6709\u5185\u5bb9\uff09\uff0c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u8fd9\u662f add \u51fd\u6570\u7684\u51fd\u6570\u539f\u578b\uff1a int add ( int x , int y ); // function prototype includes return type, name, parameters, and semicolon. No function body! \u73b0\u5728\uff0c\u8fd9\u662f\u6211\u4eec\u6ca1\u6709\u7f16\u8bd1\u7684\u539f\u59cb\u7a0b\u5e8f\uff0c\u4f7f\u7528\u51fd\u6570\u539f\u578b\u4f5c\u4e3a\u51fd\u6570 add \u7684\u524d\u5411\u58f0\u660e\uff1a #include <iostream> int add ( int x , int y ); // forward declaration of add() (using a function prototype) int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; // this works because we forward declared add() above return 0 ; } int add ( int x , int y ) // even though the body of add() isn't defined until here { return x + y ; } \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u51fd\u6570\u539f\u578b\u4e0d\u9700\u8981\u6307\u5b9a\u53c2\u6570\u7684\u540d\u79f0\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u60a8\u8fd8\u53ef\u4ee5\u50cf\u8fd9\u6837\u8f6c\u53d1\u58f0\u660e\u60a8\u7684\u51fd\u6570\uff1a int add ( int , int ); // valid function prototype \u4f46\u662f\uff0c\u6211\u4eec\u66f4\u559c\u6b22\u7ed9\u6211\u4eec\u7684\u53c2\u6570\u547d\u540d\uff08\u4f7f\u7528\u4e0e\u5b9e\u9645\u51fd\u6570\u76f8\u540c\u7684\u540d\u79f0\uff09\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u8ba9\u60a8\u901a\u8fc7\u67e5\u770b\u539f\u578b\u6765\u4e86\u89e3\u51fd\u6570\u53c2\u6570\u662f\u4ec0\u4e48\u3002\u5426\u5219\uff0c\u60a8\u5fc5\u987b\u627e\u5230\u51fd\u6570\u5b9a\u4e49\u3002 \u8f6c\u53d1\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u4f46\u6ca1\u6709\u5b9a\u4e49\u5b83\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u89c6\u60c5\u51b5\u800c\u5b9a\u3002\u5982\u679c\u8fdb\u884c\u4e86\u524d\u5411\u58f0\u660e\uff0c\u4f46\u4ece\u672a\u8c03\u7528\u8fc7\u8be5\u51fd\u6570\uff0c\u5219\u7a0b\u5e8f\u5c06\u7f16\u8bd1\u5e76\u8fd0\u884c\u826f\u597d\u3002\u4f46\u662f\uff0c\u5982\u679c\u8fdb\u884c\u4e86\u524d\u5411\u58f0\u660e\u5e76\u8c03\u7528\u4e86\u8be5\u51fd\u6570\uff0c\u4f46\u7a0b\u5e8f\u4ece\u672a\u5b9a\u4e49\u8be5\u51fd\u6570\uff0c\u5219\u7a0b\u5e8f\u5c06\u6b63\u5e38\u7f16\u8bd1\uff0c\u4f46\u94fe\u63a5\u5668\u4f1a\u62b1\u6028\u5b83\u65e0\u6cd5\u89e3\u6790\u51fd\u6570\u8c03\u7528\u3002","title":"5.\u524d\u5411\u58f0\u660e\u548c\u5b9a\u4e49\u5411\u524d\u58f0\u660e\u548c\u5b9a\u4e49"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#6","text":"main.cpp\uff08\u5e26\u6709\u524d\u5411\u58f0\u660e\uff09\uff1a #include <iostream> int add ( int x , int y ); // needed so main.cpp knows that add() is a function declared elsewhere int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } add.cpp\uff08\u4fdd\u6301\u4e0d\u53d8\uff09\uff1a int add ( int x , int y ) { return x + y ; } \u5f53\u7f16\u8bd1\u5668\u7f16\u8bd1 main.cpp \u65f6\uff0c\u5b83\u4f1a\u77e5\u9053 add \u662f\u4ec0\u4e48\u6807\u8bc6\u7b26\u5e76\u5f97\u5230\u6ee1\u8db3\u3002\u94fe\u63a5\u5668\u4f1a\u5c06 main.cpp \u4e2d\u7684 add \u51fd\u6570\u8c03\u7528\u8fde\u63a5\u5230 add.cpp \u4e2d\u7684\u51fd\u6570 add \u5b9a\u4e49\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u6587\u4ef6\u8bbf\u95ee\u5b58\u5728\u4e8e\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u3002","title":"6. \u5305\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u7a0b\u5e8f"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#7header-files","text":"\u968f\u7740\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff08\u5e76\u4f7f\u7528\u66f4\u591a\u6587\u4ef6\uff09\uff0c\u5fc5\u987b\u8f6c\u53d1\u58f0\u660e\u60a8\u8981\u4f7f\u7528\u7684\u6bcf\u4e2a\u5728\u4e0d\u540c\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u53d8\u5f97\u8d8a\u6765\u8d8a\u4e4f\u5473\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u524d\u5411\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u7136\u540e\u5728\u9700\u8981\u65f6\u5bfc\u5165\u5b83\u4eec\uff0c\u90a3\u4e0d\u662f\u5f88\u597d\u5417\uff1f \u5934\u6587\u4ef6\u5141\u8bb8\u6211\u4eec\u5c06\u58f0\u660e\u653e\u5728\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5728\u9700\u8981\u5b83\u4eec\u7684\u5730\u65b9\u5bfc\u5165\u5b83\u4eec\u3002\u8fd9\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u5728\u591a\u6587\u4ef6\u7a0b\u5e8f\u4e2d\u7684\u8f93\u5165\u3002","title":"7.Header files \u5934\u6587\u4ef6"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#using-standard-library-header-files","text":"#include <iostream> int main () { std :: cout << \"Hello, world!\" ; return 0 ; } \u7b54\u6848\u662f std::cout \u5df2\u5728\u201ciostream\u201d\u5934\u6587\u4ef6\u4e2d\u524d\u5411\u58f0\u660e\u3002\u5f53\u6211\u4eec#include\uff0c\u6211\u4eec\u8981\u6c42\u9884\u5904\u7406\u5668\u5c06\u6240\u6709\u5185\u5bb9\uff08\u5305\u62ec std::cout \u7684\u524d\u5411\u58f0\u660e\uff09\u4ece\u540d\u4e3a\u201ciostream\u201d\u7684\u6587\u4ef6\u590d\u5236\u5230\u6267\u884c#include \u7684\u6587\u4ef6\u4e2d\u3002 \u5f53#include \u6587\u4ef6\u65f6\uff0c\u5305\u542b\u6587\u4ef6\u7684\u5185\u5bb9\u5c06\u63d2\u5165\u5230\u5305\u542b\u70b9\u3002\u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u63d0\u53d6\u58f0\u660e\u7684\u6709\u7528\u65b9\u6cd5\u3002 \u5f53\u6d89\u53ca\u5230\u51fd\u6570\u548c\u53d8\u91cf\u65f6\uff0c\u503c\u5f97\u8bb0\u4f4f\u7684\u662f\uff0c\u5934\u6587\u4ef6\u901a\u5e38\u53ea\u5305\u542b\u51fd\u6570\u548c\u53d8\u91cf\u58f0\u660e\uff0c\u800c\u4e0d\u5305\u542b\u51fd\u6570\u548c\u53d8\u91cf\u5b9a\u4e49\uff08\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u8fdd\u53cd\u5355\u4e00\u5b9a\u4e49\u89c4\u5219\uff09","title":"Using standard library header files"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#_3","text":"\u5934\u6587\u4ef6\u53ea\u5305\u542b\u4e24\u90e8\u5206: 1. A header guard \u5934\u6587\u4ef6\u4fdd\u62a4\u7b26 2. \u5934\u6587\u4ef6\u7684\u5b9e\u9645\u5185\u5bb9\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u5e0c\u671b\u5176\u4ed6\u6587\u4ef6\u80fd\u591f\u770b\u5230\u7684\u6240\u6709\u6807\u8bc6\u7b26\u7684\u524d\u5411\u58f0\u660e\u3002","title":"\u7f16\u5199\u81ea\u5df1\u7684\u5934\u6587\u4ef6"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#_4","text":"something.h: int something ( int ); // return type of forward declaration is int something.cpp: #include \"something.h\" void something ( int ) // error: wrong return type { } \u56e0\u4e3a something.cpp #includes something.h\uff0c\u7f16\u8bd1\u5668\u4f1a\u6ce8\u610f\u5230\u51fd\u6570 something() \u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u5e76\u7ed9\u6211\u4eec\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u3002\u5982\u679csomething.cpp \u6ca1\u6709#include something.h\uff0c\u6211\u4eec\u5fc5\u987b\u7b49\u5230\u94fe\u63a5\u5668\u53d1\u73b0\u5dee\u5f02\uff0c\u8fd9\u4f1a\u6d6a\u8d39\u65f6\u95f4\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u6b64\u8bc4\u8bba\u3002","title":"\u6e90\u6587\u4ef6\u5e94\u8be5\u5305\u62ec\u5b83\u4eec\u7684\u914d\u5bf9\u5934\u6587\u4ef6"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#_5","text":"\u5f53\u6211\u4eec\u4f7f\u7528\u5c16\u62ec\u53f7\u65f6\uff0c\u6211\u4eec\u662f\u5728\u544a\u8bc9\u9884\u5904\u7406\u5668\u8fd9\u662f\u4e00\u4e2a\u4e0d\u662f\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u5934\u6587\u4ef6\u3002\u7f16\u8bd1\u5668\u5c06\u4ec5\u5728\u5305\u542b\u76ee\u5f55\u6307\u5b9a\u7684\u76ee\u5f55\u4e2d\u641c\u7d22\u5934\u6587\u4ef6\u3002\u5305\u542b\u76ee\u5f55\u914d\u7f6e\u4e3a\u9879\u76ee/IDE \u8bbe\u7f6e/\u7f16\u8bd1\u5668\u8bbe\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u901a\u5e38\u9ed8\u8ba4\u4e3a\u5305\u542b\u7f16\u8bd1\u5668\u548c/\u6216\u64cd\u4f5c\u7cfb\u7edf\u9644\u5e26\u7684\u5934\u6587\u4ef6\u7684\u76ee\u5f55\u3002\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5728\u9879\u76ee\u7684\u6e90\u4ee3\u7801\u76ee\u5f55\u4e2d\u641c\u7d22\u5934\u6587\u4ef6\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u53cc\u5f15\u53f7\u65f6\uff0c\u6211\u4eec\u662f\u5728\u544a\u8bc9\u9884\u5904\u7406\u5668\u8fd9\u662f\u6211\u4eec\u7f16\u5199\u7684\u5934\u6587\u4ef6\u3002\u7f16\u8bd1\u5668\u5c06\u9996\u5148\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u641c\u7d22\u5934\u6587\u4ef6\u3002\u5982\u679c\u5728\u90a3\u91cc\u627e\u4e0d\u5230\u5339\u914d\u7684\u6807\u5934\uff0c\u5b83\u5c06\u641c\u7d22\u5305\u542b\u76ee\u5f55\u3002 Note \u4f7f\u7528\u53cc\u5f15\u53f7\u6765\u5305\u542b\u60a8\u5df2\u7f16\u5199\u6216\u9884\u671f\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u627e\u5230\u7684\u5934\u6587\u4ef6\u3002\u4f7f\u7528\u5c16\u62ec\u53f7\u6765\u5305\u542b\u60a8\u7684\u7f16\u8bd1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u6216\u60a8\u5728\u7cfb\u7edf\u5176\u4ed6\u5730\u65b9\u5b89\u88c5\u7684\u7b2c\u4e09\u65b9\u5e93\u9644\u5e26\u7684\u5934\u6587\u4ef6\u3002","title":"\u5c16\u62ec\u53f7\u4e0e\u53cc\u5f15\u53f7"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#header-file-best-practices","text":"\u59cb\u7ec8\u5305\u62ec\u5934\u5b88\u536b\uff08\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8bfe\u4e2d\u4ecb\u7ecd\u8fd9\u4e9b\u5185\u5bb9\uff09\u3002 \u4e0d\u8981\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u53d8\u91cf\u548c\u51fd\u6570\uff08\u5168\u5c40\u5e38\u91cf\u662f\u4e00\u4e2a\u4f8b\u5916\u2014\u2014\u6211\u4eec\u7a0d\u540e\u4f1a\u4ecb\u7ecd\uff09 \u4e3a\u60a8\u7684\u5934\u6587\u4ef6\u63d0\u4f9b\u4e0e\u5b83\u4eec\u5173\u8054\u7684\u6e90\u6587\u4ef6\u76f8\u540c\u7684\u540d\u79f0\uff08\u4f8b\u5982\uff0cgrades.h \u4e0egrades.cpp \u914d\u5bf9\uff09\u3002 \u6bcf\u4e2a\u5934\u6587\u4ef6\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u72ec\u7acb\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u6240\u6709\u4e0e\u529f\u80fd A \u76f8\u5173\u7684\u58f0\u660e\u653e\u5728 Ah \u4e2d\uff0c\u5c06\u6240\u6709\u4e0e\u529f\u80fd B \u76f8\u5173\u7684\u58f0\u660e\u653e\u5728 Bh \u4e2d\u3002\u8fd9\u6837\uff0c\u5982\u679c\u60a8\u4ee5\u540e\u53ea\u5173\u5fc3 A\uff0c\u5219\u53ef\u4ee5\u53ea\u5305\u542b Ah \u800c\u4e0d\u4f1a\u83b7\u5f97\u4e0e B \u76f8\u5173\u7684\u4efb\u4f55\u5185\u5bb9. \u8bf7\u6ce8\u610f\u60a8\u9700\u8981\u4e3a\u60a8\u5728\u4ee3\u7801\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u529f\u80fd\u663e\u5f0f\u5305\u542b\u54ea\u4e9b\u6807\u5934 \u60a8\u7f16\u5199\u7684\u6bcf\u4e2a\u6807\u5934\u90fd\u5e94\u8be5\u81ea\u5df1\u7f16\u8bd1\uff08\u5b83\u5e94\u8be5#include\u5b83\u9700\u8981\u7684\u6bcf\u4e2a\u4f9d\u8d56\u9879\uff09 \u4ec5 #include \u60a8\u9700\u8981\u7684\u5185\u5bb9\uff08\u4e0d\u8981\u4ec5\u4ec5\u56e0\u4e3a\u53ef\u4ee5\u5305\u542b\u6240\u6709\u5185\u5bb9\uff09\u3002 \u4e0d\u8981#include .cpp \u6587\u4ef6\u3002","title":"Header file best practices"},{"location":"cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic/#8header-guard","text":"\u5bf9\u4e8e\u5934\u6587\u4ef6\uff0c\u5f88\u5bb9\u6613\u5bfc\u81f4\u5934\u6587\u4ef6\u4e2d\u7684\u5b9a\u4e49\u88ab\u591a\u6b21\u5305\u542b\u7684\u60c5\u51b5\u3002\u5f53\u4e00\u4e2a\u5934\u6587\u4ef6#includes\u53e6\u4e00\u4e2a\u5934\u6587\u4ef6\uff08\u8fd9\u5f88\u5e38\u89c1\uff09\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u6807\u5934\u4fdd\u62a4\u662f\u91c7\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\uff1a #ifndef SOME_UNIQUE_NAME_HERE #define SOME_UNIQUE_NAME_HERE // your declarations (and certain types of definitions) here #endif \u4f60\u6240\u6709\u7684\u5934\u6587\u4ef6\u90fd\u5e94\u8be5\u6709\u5934\u6587\u4ef6\u4fdd\u62a4\u3002SOME_UNIQUE_NAME_HERE \u53ef\u4ee5\u662f\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u540d\u79f0\uff0c\u4f46\u6309\u7167\u60ef\u4f8b\u8bbe\u7f6e\u4e3a\u5934\u6587\u4ef6\u7684\u5b8c\u6574\u6587\u4ef6\u540d\uff0c\u5168\u90e8\u5927\u5199\uff0c\u7a7a\u683c\u6216\u6807\u70b9\u4f7f\u7528\u4e0b\u5212\u7ebf\u3002\u4f8b\u5982\uff0c square.h \u5c06\u5177\u6709\u6807\u5934\u4fdd\u62a4\uff1a #ifndef SQUARE_H #define SQUARE_H int getSquareSides (); // forward declaration for getSquareSides int getSquarePerimeter ( int sideLength ); // forward declaration for getSquarePerimeter #endif","title":"8.header guard \u5934\u6587\u4ef6\u4fdd\u62a4"}]}